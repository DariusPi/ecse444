ARM GAS  /tmp/ccqr6NDX.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB138:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include <stdio.h>
  27:Src/main.c    **** 
  28:Src/main.c    **** #include <errno.h>
  29:Src/main.c    **** #undef errno
  30:Src/main.c    **** extern int errno;
  31:Src/main.c    **** /* USER CODE END Includes */
  32:Src/main.c    **** 
ARM GAS  /tmp/ccqr6NDX.s 			page 2


  33:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  34:Src/main.c    **** /* USER CODE BEGIN PTD */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* USER CODE END PTD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  39:Src/main.c    **** /* USER CODE BEGIN PD */
  40:Src/main.c    **** /* USER CODE END PD */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  43:Src/main.c    **** /* USER CODE BEGIN PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* USER CODE END PM */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  48:Src/main.c    **** DAC_HandleTypeDef hdac1;
  49:Src/main.c    **** 
  50:Src/main.c    **** QSPI_HandleTypeDef hqspi;
  51:Src/main.c    **** 
  52:Src/main.c    **** TIM_HandleTypeDef htim3;
  53:Src/main.c    **** 
  54:Src/main.c    **** UART_HandleTypeDef huart1;
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE BEGIN PV */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE END PV */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  61:Src/main.c    **** void SystemClock_Config(void);
  62:Src/main.c    **** static void MX_GPIO_Init(void);
  63:Src/main.c    **** static void MX_DAC1_Init(void);
  64:Src/main.c    **** static void MX_QUADSPI_Init(void);
  65:Src/main.c    **** static void MX_TIM3_Init(void);
  66:Src/main.c    **** static void MX_USART1_UART_Init(void);
  67:Src/main.c    **** /* USER CODE BEGIN PFP */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE END PFP */
  70:Src/main.c    **** 
  71:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  72:Src/main.c    **** /* USER CODE BEGIN 0 */
  73:Src/main.c    **** int _write (int fd, char * ptr, int len) 
  74:Src/main.c    **** {
  75:Src/main.c    ****   while (HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_UART_TIMEOUT_VALUE));
  76:Src/main.c    ****   return (len);
  77:Src/main.c    **** }
  78:Src/main.c    **** /* USER CODE END 0 */
  79:Src/main.c    **** 
  80:Src/main.c    **** /**
  81:Src/main.c    ****   * @brief  The application entry point.
  82:Src/main.c    ****   * @retval int
  83:Src/main.c    ****   */
  84:Src/main.c    **** int main(void)
  85:Src/main.c    **** {
  86:Src/main.c    ****   /* USER CODE BEGIN 1 */
  87:Src/main.c    **** 
  88:Src/main.c    ****   /* USER CODE END 1 */
  89:Src/main.c    ****   
ARM GAS  /tmp/ccqr6NDX.s 			page 3


  90:Src/main.c    **** 
  91:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  92:Src/main.c    **** 
  93:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  94:Src/main.c    ****   HAL_Init();
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* USER CODE BEGIN Init */
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* USER CODE END Init */
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* Configure the system clock */
 101:Src/main.c    ****   SystemClock_Config();
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE END SysInit */
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* Initialize all configured peripherals */
 108:Src/main.c    ****   MX_GPIO_Init();
 109:Src/main.c    ****   MX_DAC1_Init();
 110:Src/main.c    ****   MX_TIM3_Init();
 111:Src/main.c    ****   MX_USART1_UART_Init();
 112:Src/main.c    ****   /* USER CODE BEGIN 2 */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* USER CODE END 2 */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* Infinite loop */
 117:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 118:Src/main.c    ****   while (1)
 119:Src/main.c    ****   {
 120:Src/main.c    ****     /* USER CODE END WHILE */
 121:Src/main.c    ****     printf("Hello World\n");
 122:Src/main.c    ****     /* USER CODE BEGIN 3 */
 123:Src/main.c    ****   }
 124:Src/main.c    ****   /* USER CODE END 3 */
 125:Src/main.c    **** }
 126:Src/main.c    **** 
 127:Src/main.c    **** /**
 128:Src/main.c    ****   * @brief System Clock Configuration
 129:Src/main.c    ****   * @retval None
 130:Src/main.c    ****   */
 131:Src/main.c    **** void SystemClock_Config(void)
 132:Src/main.c    **** {
 133:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 134:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 135:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 136:Src/main.c    **** 
 137:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 138:Src/main.c    ****   */
 139:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 140:Src/main.c    ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 141:Src/main.c    ****   RCC_OscInitStruct.MSICalibrationValue = 0;
 142:Src/main.c    ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 143:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 144:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 145:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 1;
 146:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 40;
ARM GAS  /tmp/ccqr6NDX.s 			page 4


 147:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 148:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 149:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 150:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 151:Src/main.c    ****   {
 152:Src/main.c    ****     Error_Handler();
 153:Src/main.c    ****   }
 154:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 155:Src/main.c    ****   */
 156:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 157:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 158:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 159:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 160:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 161:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 162:Src/main.c    **** 
 163:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 164:Src/main.c    ****   {
 165:Src/main.c    ****     Error_Handler();
 166:Src/main.c    ****   }
 167:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 168:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 169:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 170:Src/main.c    ****   {
 171:Src/main.c    ****     Error_Handler();
 172:Src/main.c    ****   }
 173:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 174:Src/main.c    ****   */
 175:Src/main.c    ****   if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 176:Src/main.c    ****   {
 177:Src/main.c    ****     Error_Handler();
 178:Src/main.c    ****   }
 179:Src/main.c    **** }
 180:Src/main.c    **** 
 181:Src/main.c    **** /**
 182:Src/main.c    ****   * @brief DAC1 Initialization Function
 183:Src/main.c    ****   * @param None
 184:Src/main.c    ****   * @retval None
 185:Src/main.c    ****   */
 186:Src/main.c    **** static void MX_DAC1_Init(void)
 187:Src/main.c    **** {
 188:Src/main.c    **** 
 189:Src/main.c    ****   /* USER CODE BEGIN DAC1_Init 0 */
 190:Src/main.c    **** 
 191:Src/main.c    ****   /* USER CODE END DAC1_Init 0 */
 192:Src/main.c    **** 
 193:Src/main.c    ****   DAC_ChannelConfTypeDef sConfig = {0};
 194:Src/main.c    **** 
 195:Src/main.c    ****   /* USER CODE BEGIN DAC1_Init 1 */
 196:Src/main.c    **** 
 197:Src/main.c    ****   /* USER CODE END DAC1_Init 1 */
 198:Src/main.c    ****   /** DAC Initialization 
 199:Src/main.c    ****   */
 200:Src/main.c    ****   hdac1.Instance = DAC1;
 201:Src/main.c    ****   if (HAL_DAC_Init(&hdac1) != HAL_OK)
 202:Src/main.c    ****   {
 203:Src/main.c    ****     Error_Handler();
ARM GAS  /tmp/ccqr6NDX.s 			page 5


 204:Src/main.c    ****   }
 205:Src/main.c    ****   /** DAC channel OUT1 config 
 206:Src/main.c    ****   */
 207:Src/main.c    ****   sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 208:Src/main.c    ****   sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 209:Src/main.c    ****   sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 210:Src/main.c    ****   sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 211:Src/main.c    ****   sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 212:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 213:Src/main.c    ****   {
 214:Src/main.c    ****     Error_Handler();
 215:Src/main.c    ****   }
 216:Src/main.c    ****   /** DAC channel OUT2 config 
 217:Src/main.c    ****   */
 218:Src/main.c    ****   sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 219:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 220:Src/main.c    ****   {
 221:Src/main.c    ****     Error_Handler();
 222:Src/main.c    ****   }
 223:Src/main.c    ****   /* USER CODE BEGIN DAC1_Init 2 */
 224:Src/main.c    **** 
 225:Src/main.c    ****   /* USER CODE END DAC1_Init 2 */
 226:Src/main.c    **** 
 227:Src/main.c    **** }
 228:Src/main.c    **** 
 229:Src/main.c    **** /**
 230:Src/main.c    ****   * @brief QUADSPI Initialization Function
 231:Src/main.c    ****   * @param None
 232:Src/main.c    ****   * @retval None
 233:Src/main.c    ****   */
 234:Src/main.c    **** static void MX_QUADSPI_Init(void)
 235:Src/main.c    **** {
 236:Src/main.c    **** 
 237:Src/main.c    ****   /* USER CODE BEGIN QUADSPI_Init 0 */
 238:Src/main.c    **** 
 239:Src/main.c    ****   /* USER CODE END QUADSPI_Init 0 */
 240:Src/main.c    **** 
 241:Src/main.c    ****   /* USER CODE BEGIN QUADSPI_Init 1 */
 242:Src/main.c    **** 
 243:Src/main.c    ****   /* USER CODE END QUADSPI_Init 1 */
 244:Src/main.c    ****   /* QUADSPI parameter configuration*/
 245:Src/main.c    ****   hqspi.Instance = QUADSPI;
 246:Src/main.c    ****   hqspi.Init.ClockPrescaler = 255;
 247:Src/main.c    ****   hqspi.Init.FifoThreshold = 1;
 248:Src/main.c    ****   hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 249:Src/main.c    ****   hqspi.Init.FlashSize = 1;
 250:Src/main.c    ****   hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 251:Src/main.c    ****   hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 252:Src/main.c    ****   if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 253:Src/main.c    ****   {
 254:Src/main.c    ****     Error_Handler();
 255:Src/main.c    ****   }
 256:Src/main.c    ****   /* USER CODE BEGIN QUADSPI_Init 2 */
 257:Src/main.c    **** 
 258:Src/main.c    ****   /* USER CODE END QUADSPI_Init 2 */
 259:Src/main.c    **** 
 260:Src/main.c    **** }
ARM GAS  /tmp/ccqr6NDX.s 			page 6


 261:Src/main.c    **** 
 262:Src/main.c    **** /**
 263:Src/main.c    ****   * @brief TIM3 Initialization Function
 264:Src/main.c    ****   * @param None
 265:Src/main.c    ****   * @retval None
 266:Src/main.c    ****   */
 267:Src/main.c    **** static void MX_TIM3_Init(void)
 268:Src/main.c    **** {
 269:Src/main.c    **** 
 270:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
 271:Src/main.c    **** 
 272:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
 273:Src/main.c    **** 
 274:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 275:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 276:Src/main.c    **** 
 277:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
 278:Src/main.c    **** 
 279:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
 280:Src/main.c    ****   htim3.Instance = TIM3;
 281:Src/main.c    ****   htim3.Init.Prescaler = 0;
 282:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 283:Src/main.c    ****   htim3.Init.Period = 5000;
 284:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 285:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 286:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 287:Src/main.c    ****   {
 288:Src/main.c    ****     Error_Handler();
 289:Src/main.c    ****   }
 290:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 291:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 292:Src/main.c    ****   {
 293:Src/main.c    ****     Error_Handler();
 294:Src/main.c    ****   }
 295:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 296:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 297:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 298:Src/main.c    ****   {
 299:Src/main.c    ****     Error_Handler();
 300:Src/main.c    ****   }
 301:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
 302:Src/main.c    **** 
 303:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
 304:Src/main.c    **** 
 305:Src/main.c    **** }
 306:Src/main.c    **** 
 307:Src/main.c    **** /**
 308:Src/main.c    ****   * @brief USART1 Initialization Function
 309:Src/main.c    ****   * @param None
 310:Src/main.c    ****   * @retval None
 311:Src/main.c    ****   */
 312:Src/main.c    **** static void MX_USART1_UART_Init(void)
 313:Src/main.c    **** {
 314:Src/main.c    **** 
 315:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
 316:Src/main.c    **** 
 317:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
ARM GAS  /tmp/ccqr6NDX.s 			page 7


 318:Src/main.c    **** 
 319:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
 320:Src/main.c    **** 
 321:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
 322:Src/main.c    ****   huart1.Instance = USART1;
 323:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 324:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 325:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 326:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 327:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 328:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 329:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 330:Src/main.c    ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 331:Src/main.c    ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 332:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 333:Src/main.c    ****   {
 334:Src/main.c    ****     Error_Handler();
 335:Src/main.c    ****   }
 336:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
 337:Src/main.c    **** 
 338:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
 339:Src/main.c    **** 
 340:Src/main.c    **** }
 341:Src/main.c    **** 
 342:Src/main.c    **** /**
 343:Src/main.c    ****   * @brief GPIO Initialization Function
 344:Src/main.c    ****   * @param None
 345:Src/main.c    ****   * @retval None
 346:Src/main.c    ****   */
 347:Src/main.c    **** static void MX_GPIO_Init(void)
 348:Src/main.c    **** {
  27              		.loc 1 348 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 84B0     		sub	sp, sp, #16
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
  35              	.LBB2:
 349:Src/main.c    **** 
 350:Src/main.c    ****   /* GPIO Ports Clock Enable */
 351:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  36              		.loc 1 351 0
  37 0002 0F4B     		ldr	r3, .L3
  38 0004 DA6C     		ldr	r2, [r3, #76]
  39 0006 42F00102 		orr	r2, r2, #1
  40 000a DA64     		str	r2, [r3, #76]
  41 000c DA6C     		ldr	r2, [r3, #76]
  42 000e 02F00102 		and	r2, r2, #1
  43 0012 0192     		str	r2, [sp, #4]
  44 0014 019A     		ldr	r2, [sp, #4]
  45              	.LBE2:
  46              	.LBB3:
 352:Src/main.c    ****   __HAL_RCC_GPIOE_CLK_ENABLE();
  47              		.loc 1 352 0
  48 0016 DA6C     		ldr	r2, [r3, #76]
ARM GAS  /tmp/ccqr6NDX.s 			page 8


  49 0018 42F01002 		orr	r2, r2, #16
  50 001c DA64     		str	r2, [r3, #76]
  51 001e DA6C     		ldr	r2, [r3, #76]
  52 0020 02F01002 		and	r2, r2, #16
  53 0024 0292     		str	r2, [sp, #8]
  54 0026 029A     		ldr	r2, [sp, #8]
  55              	.LBE3:
  56              	.LBB4:
 353:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  57              		.loc 1 353 0
  58 0028 DA6C     		ldr	r2, [r3, #76]
  59 002a 42F00202 		orr	r2, r2, #2
  60 002e DA64     		str	r2, [r3, #76]
  61 0030 DB6C     		ldr	r3, [r3, #76]
  62 0032 03F00203 		and	r3, r3, #2
  63 0036 0393     		str	r3, [sp, #12]
  64 0038 039B     		ldr	r3, [sp, #12]
  65              	.LBE4:
 354:Src/main.c    **** 
 355:Src/main.c    **** }
  66              		.loc 1 355 0
  67 003a 04B0     		add	sp, sp, #16
  68              	.LCFI1:
  69              		.cfi_def_cfa_offset 0
  70              		@ sp needed
  71 003c 7047     		bx	lr
  72              	.L4:
  73 003e 00BF     		.align	2
  74              	.L3:
  75 0040 00100240 		.word	1073876992
  76              		.cfi_endproc
  77              	.LFE138:
  79              		.section	.text.MX_DAC1_Init,"ax",%progbits
  80              		.align	1
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  84              		.fpu fpv4-sp-d16
  86              	MX_DAC1_Init:
  87              	.LFB134:
 187:Src/main.c    **** 
  88              		.loc 1 187 0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 40
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92 0000 30B5     		push	{r4, r5, lr}
  93              	.LCFI2:
  94              		.cfi_def_cfa_offset 12
  95              		.cfi_offset 4, -12
  96              		.cfi_offset 5, -8
  97              		.cfi_offset 14, -4
  98 0002 8BB0     		sub	sp, sp, #44
  99              	.LCFI3:
 100              		.cfi_def_cfa_offset 56
 193:Src/main.c    **** 
 101              		.loc 1 193 0
 102 0004 2422     		movs	r2, #36
ARM GAS  /tmp/ccqr6NDX.s 			page 9


 103 0006 0021     		movs	r1, #0
 104 0008 01A8     		add	r0, sp, #4
 105 000a FFF7FEFF 		bl	memset
 106              	.LVL0:
 200:Src/main.c    ****   if (HAL_DAC_Init(&hdac1) != HAL_OK)
 107              		.loc 1 200 0
 108 000e 0C4D     		ldr	r5, .L7
 109 0010 0C4B     		ldr	r3, .L7+4
 110 0012 2B60     		str	r3, [r5]
 201:Src/main.c    ****   {
 111              		.loc 1 201 0
 112 0014 2846     		mov	r0, r5
 113 0016 FFF7FEFF 		bl	HAL_DAC_Init
 114              	.LVL1:
 207:Src/main.c    ****   sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 115              		.loc 1 207 0
 116 001a 0024     		movs	r4, #0
 117 001c 0194     		str	r4, [sp, #4]
 208:Src/main.c    ****   sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 118              		.loc 1 208 0
 119 001e 0294     		str	r4, [sp, #8]
 209:Src/main.c    ****   sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 120              		.loc 1 209 0
 121 0020 0394     		str	r4, [sp, #12]
 210:Src/main.c    ****   sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 122              		.loc 1 210 0
 123 0022 0494     		str	r4, [sp, #16]
 211:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 124              		.loc 1 211 0
 125 0024 0594     		str	r4, [sp, #20]
 212:Src/main.c    ****   {
 126              		.loc 1 212 0
 127 0026 2246     		mov	r2, r4
 128 0028 01A9     		add	r1, sp, #4
 129 002a 2846     		mov	r0, r5
 130 002c FFF7FEFF 		bl	HAL_DAC_ConfigChannel
 131              	.LVL2:
 218:Src/main.c    ****   if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 132              		.loc 1 218 0
 133 0030 0494     		str	r4, [sp, #16]
 219:Src/main.c    ****   {
 134              		.loc 1 219 0
 135 0032 1022     		movs	r2, #16
 136 0034 01A9     		add	r1, sp, #4
 137 0036 2846     		mov	r0, r5
 138 0038 FFF7FEFF 		bl	HAL_DAC_ConfigChannel
 139              	.LVL3:
 227:Src/main.c    **** 
 140              		.loc 1 227 0
 141 003c 0BB0     		add	sp, sp, #44
 142              	.LCFI4:
 143              		.cfi_def_cfa_offset 12
 144              		@ sp needed
 145 003e 30BD     		pop	{r4, r5, pc}
 146              	.L8:
 147              		.align	2
 148              	.L7:
ARM GAS  /tmp/ccqr6NDX.s 			page 10


 149 0040 00000000 		.word	hdac1
 150 0044 00740040 		.word	1073771520
 151              		.cfi_endproc
 152              	.LFE134:
 154              		.section	.text.MX_TIM3_Init,"ax",%progbits
 155              		.align	1
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 159              		.fpu fpv4-sp-d16
 161              	MX_TIM3_Init:
 162              	.LFB136:
 268:Src/main.c    **** 
 163              		.loc 1 268 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 32
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167 0000 30B5     		push	{r4, r5, lr}
 168              	.LCFI5:
 169              		.cfi_def_cfa_offset 12
 170              		.cfi_offset 4, -12
 171              		.cfi_offset 5, -8
 172              		.cfi_offset 14, -4
 173 0002 89B0     		sub	sp, sp, #36
 174              	.LCFI6:
 175              		.cfi_def_cfa_offset 48
 274:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 176              		.loc 1 274 0
 177 0004 0024     		movs	r4, #0
 178 0006 0494     		str	r4, [sp, #16]
 179 0008 0594     		str	r4, [sp, #20]
 180 000a 0694     		str	r4, [sp, #24]
 181 000c 0794     		str	r4, [sp, #28]
 275:Src/main.c    **** 
 182              		.loc 1 275 0
 183 000e 0194     		str	r4, [sp, #4]
 184 0010 0294     		str	r4, [sp, #8]
 185 0012 0394     		str	r4, [sp, #12]
 280:Src/main.c    ****   htim3.Init.Prescaler = 0;
 186              		.loc 1 280 0
 187 0014 0E4D     		ldr	r5, .L11
 188 0016 0F4B     		ldr	r3, .L11+4
 189 0018 2B60     		str	r3, [r5]
 281:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 190              		.loc 1 281 0
 191 001a 6C60     		str	r4, [r5, #4]
 282:Src/main.c    ****   htim3.Init.Period = 5000;
 192              		.loc 1 282 0
 193 001c AC60     		str	r4, [r5, #8]
 283:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 194              		.loc 1 283 0
 195 001e 41F28833 		movw	r3, #5000
 196 0022 EB60     		str	r3, [r5, #12]
 284:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 197              		.loc 1 284 0
 198 0024 2C61     		str	r4, [r5, #16]
 285:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
ARM GAS  /tmp/ccqr6NDX.s 			page 11


 199              		.loc 1 285 0
 200 0026 8023     		movs	r3, #128
 201 0028 AB61     		str	r3, [r5, #24]
 286:Src/main.c    ****   {
 202              		.loc 1 286 0
 203 002a 2846     		mov	r0, r5
 204 002c FFF7FEFF 		bl	HAL_TIM_Base_Init
 205              	.LVL4:
 290:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 206              		.loc 1 290 0
 207 0030 4FF48053 		mov	r3, #4096
 208 0034 0493     		str	r3, [sp, #16]
 291:Src/main.c    ****   {
 209              		.loc 1 291 0
 210 0036 04A9     		add	r1, sp, #16
 211 0038 2846     		mov	r0, r5
 212 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 213              	.LVL5:
 295:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 214              		.loc 1 295 0
 215 003e 0194     		str	r4, [sp, #4]
 296:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 216              		.loc 1 296 0
 217 0040 0394     		str	r4, [sp, #12]
 297:Src/main.c    ****   {
 218              		.loc 1 297 0
 219 0042 01A9     		add	r1, sp, #4
 220 0044 2846     		mov	r0, r5
 221 0046 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 222              	.LVL6:
 305:Src/main.c    **** 
 223              		.loc 1 305 0
 224 004a 09B0     		add	sp, sp, #36
 225              	.LCFI7:
 226              		.cfi_def_cfa_offset 12
 227              		@ sp needed
 228 004c 30BD     		pop	{r4, r5, pc}
 229              	.L12:
 230 004e 00BF     		.align	2
 231              	.L11:
 232 0050 00000000 		.word	htim3
 233 0054 00040040 		.word	1073742848
 234              		.cfi_endproc
 235              	.LFE136:
 237              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 238              		.align	1
 239              		.syntax unified
 240              		.thumb
 241              		.thumb_func
 242              		.fpu fpv4-sp-d16
 244              	MX_USART1_UART_Init:
 245              	.LFB137:
 313:Src/main.c    **** 
 246              		.loc 1 313 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccqr6NDX.s 			page 12


 250 0000 08B5     		push	{r3, lr}
 251              	.LCFI8:
 252              		.cfi_def_cfa_offset 8
 253              		.cfi_offset 3, -8
 254              		.cfi_offset 14, -4
 322:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 255              		.loc 1 322 0
 256 0002 0948     		ldr	r0, .L15
 257 0004 094B     		ldr	r3, .L15+4
 258 0006 0360     		str	r3, [r0]
 323:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 259              		.loc 1 323 0
 260 0008 4FF4E133 		mov	r3, #115200
 261 000c 4360     		str	r3, [r0, #4]
 324:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 262              		.loc 1 324 0
 263 000e 0023     		movs	r3, #0
 264 0010 8360     		str	r3, [r0, #8]
 325:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 265              		.loc 1 325 0
 266 0012 C360     		str	r3, [r0, #12]
 326:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 267              		.loc 1 326 0
 268 0014 0361     		str	r3, [r0, #16]
 327:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 269              		.loc 1 327 0
 270 0016 0C22     		movs	r2, #12
 271 0018 4261     		str	r2, [r0, #20]
 328:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 272              		.loc 1 328 0
 273 001a 8361     		str	r3, [r0, #24]
 329:Src/main.c    ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 274              		.loc 1 329 0
 275 001c C361     		str	r3, [r0, #28]
 330:Src/main.c    ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 276              		.loc 1 330 0
 277 001e 0362     		str	r3, [r0, #32]
 331:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 278              		.loc 1 331 0
 279 0020 4362     		str	r3, [r0, #36]
 332:Src/main.c    ****   {
 280              		.loc 1 332 0
 281 0022 FFF7FEFF 		bl	HAL_UART_Init
 282              	.LVL7:
 283 0026 08BD     		pop	{r3, pc}
 284              	.L16:
 285              		.align	2
 286              	.L15:
 287 0028 00000000 		.word	huart1
 288 002c 00380140 		.word	1073821696
 289              		.cfi_endproc
 290              	.LFE137:
 292              		.section	.text._write,"ax",%progbits
 293              		.align	1
 294              		.global	_write
 295              		.syntax unified
 296              		.thumb
ARM GAS  /tmp/ccqr6NDX.s 			page 13


 297              		.thumb_func
 298              		.fpu fpv4-sp-d16
 300              	_write:
 301              	.LFB131:
  74:Src/main.c    ****   while (HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_UART_TIMEOUT_VALUE));
 302              		.loc 1 74 0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 0, uses_anonymous_args = 0
 306              	.LVL8:
 307 0000 38B5     		push	{r3, r4, r5, lr}
 308              	.LCFI9:
 309              		.cfi_def_cfa_offset 16
 310              		.cfi_offset 3, -16
 311              		.cfi_offset 4, -12
 312              		.cfi_offset 5, -8
 313              		.cfi_offset 14, -4
 314 0002 0D46     		mov	r5, r1
 315 0004 1446     		mov	r4, r2
 316              	.LVL9:
 317              	.L18:
  75:Src/main.c    ****   return (len);
 318              		.loc 1 75 0 discriminator 1
 319 0006 6FF07E43 		mvn	r3, #-33554432
 320 000a A2B2     		uxth	r2, r4
 321 000c 2946     		mov	r1, r5
 322 000e 0348     		ldr	r0, .L20
 323 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 324              	.LVL10:
 325 0014 0028     		cmp	r0, #0
 326 0016 F6D1     		bne	.L18
  77:Src/main.c    **** /* USER CODE END 0 */
 327              		.loc 1 77 0
 328 0018 2046     		mov	r0, r4
 329 001a 38BD     		pop	{r3, r4, r5, pc}
 330              	.LVL11:
 331              	.L21:
 332              		.align	2
 333              	.L20:
 334 001c 00000000 		.word	huart1
 335              		.cfi_endproc
 336              	.LFE131:
 338              		.section	.text.SystemClock_Config,"ax",%progbits
 339              		.align	1
 340              		.global	SystemClock_Config
 341              		.syntax unified
 342              		.thumb
 343              		.thumb_func
 344              		.fpu fpv4-sp-d16
 346              	SystemClock_Config:
 347              	.LFB133:
 132:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 348              		.loc 1 132 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 224
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352 0000 30B5     		push	{r4, r5, lr}
ARM GAS  /tmp/ccqr6NDX.s 			page 14


 353              	.LCFI10:
 354              		.cfi_def_cfa_offset 12
 355              		.cfi_offset 4, -12
 356              		.cfi_offset 5, -8
 357              		.cfi_offset 14, -4
 358 0002 B9B0     		sub	sp, sp, #228
 359              	.LCFI11:
 360              		.cfi_def_cfa_offset 240
 133:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 361              		.loc 1 133 0
 362 0004 4422     		movs	r2, #68
 363 0006 0021     		movs	r1, #0
 364 0008 27A8     		add	r0, sp, #156
 365 000a FFF7FEFF 		bl	memset
 366              	.LVL12:
 134:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 367              		.loc 1 134 0
 368 000e 0024     		movs	r4, #0
 369 0010 2294     		str	r4, [sp, #136]
 370 0012 2394     		str	r4, [sp, #140]
 371 0014 2494     		str	r4, [sp, #144]
 372 0016 2594     		str	r4, [sp, #148]
 373 0018 2694     		str	r4, [sp, #152]
 135:Src/main.c    **** 
 374              		.loc 1 135 0
 375 001a 8822     		movs	r2, #136
 376 001c 2146     		mov	r1, r4
 377 001e 6846     		mov	r0, sp
 378 0020 FFF7FEFF 		bl	memset
 379              	.LVL13:
 139:Src/main.c    ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 380              		.loc 1 139 0
 381 0024 1023     		movs	r3, #16
 382 0026 2793     		str	r3, [sp, #156]
 140:Src/main.c    ****   RCC_OscInitStruct.MSICalibrationValue = 0;
 383              		.loc 1 140 0
 384 0028 0125     		movs	r5, #1
 385 002a 2D95     		str	r5, [sp, #180]
 142:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 386              		.loc 1 142 0
 387 002c 6023     		movs	r3, #96
 388 002e 2F93     		str	r3, [sp, #188]
 143:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 389              		.loc 1 143 0
 390 0030 0223     		movs	r3, #2
 391 0032 3193     		str	r3, [sp, #196]
 144:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 1;
 392              		.loc 1 144 0
 393 0034 3295     		str	r5, [sp, #200]
 145:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 40;
 394              		.loc 1 145 0
 395 0036 3395     		str	r5, [sp, #204]
 146:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 396              		.loc 1 146 0
 397 0038 2822     		movs	r2, #40
 398 003a 3492     		str	r2, [sp, #208]
 147:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
ARM GAS  /tmp/ccqr6NDX.s 			page 15


 399              		.loc 1 147 0
 400 003c 0722     		movs	r2, #7
 401 003e 3592     		str	r2, [sp, #212]
 148:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 402              		.loc 1 148 0
 403 0040 3693     		str	r3, [sp, #216]
 149:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 404              		.loc 1 149 0
 405 0042 3793     		str	r3, [sp, #220]
 150:Src/main.c    ****   {
 406              		.loc 1 150 0
 407 0044 27A8     		add	r0, sp, #156
 408 0046 FFF7FEFF 		bl	HAL_RCC_OscConfig
 409              	.LVL14:
 156:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 410              		.loc 1 156 0
 411 004a 0F23     		movs	r3, #15
 412 004c 2293     		str	r3, [sp, #136]
 158:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 413              		.loc 1 158 0
 414 004e 0323     		movs	r3, #3
 415 0050 2393     		str	r3, [sp, #140]
 159:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 416              		.loc 1 159 0
 417 0052 2494     		str	r4, [sp, #144]
 160:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 418              		.loc 1 160 0
 419 0054 2594     		str	r4, [sp, #148]
 161:Src/main.c    **** 
 420              		.loc 1 161 0
 421 0056 2694     		str	r4, [sp, #152]
 163:Src/main.c    ****   {
 422              		.loc 1 163 0
 423 0058 0421     		movs	r1, #4
 424 005a 22A8     		add	r0, sp, #136
 425 005c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 426              	.LVL15:
 167:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 427              		.loc 1 167 0
 428 0060 0095     		str	r5, [sp]
 168:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 429              		.loc 1 168 0
 430 0062 0E94     		str	r4, [sp, #56]
 169:Src/main.c    ****   {
 431              		.loc 1 169 0
 432 0064 6846     		mov	r0, sp
 433 0066 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 434              	.LVL16:
 175:Src/main.c    ****   {
 435              		.loc 1 175 0
 436 006a 4FF40070 		mov	r0, #512
 437 006e FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 438              	.LVL17:
 179:Src/main.c    **** 
 439              		.loc 1 179 0
 440 0072 39B0     		add	sp, sp, #228
 441              	.LCFI12:
ARM GAS  /tmp/ccqr6NDX.s 			page 16


 442              		.cfi_def_cfa_offset 12
 443              		@ sp needed
 444 0074 30BD     		pop	{r4, r5, pc}
 445              		.cfi_endproc
 446              	.LFE133:
 448              		.section	.text.main,"ax",%progbits
 449              		.align	1
 450              		.global	main
 451              		.syntax unified
 452              		.thumb
 453              		.thumb_func
 454              		.fpu fpv4-sp-d16
 456              	main:
 457              	.LFB132:
  85:Src/main.c    ****   /* USER CODE BEGIN 1 */
 458              		.loc 1 85 0
 459              		.cfi_startproc
 460              		@ Volatile: function does not return.
 461              		@ args = 0, pretend = 0, frame = 0
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463 0000 08B5     		push	{r3, lr}
 464              	.LCFI13:
 465              		.cfi_def_cfa_offset 8
 466              		.cfi_offset 3, -8
 467              		.cfi_offset 14, -4
  94:Src/main.c    **** 
 468              		.loc 1 94 0
 469 0002 FFF7FEFF 		bl	HAL_Init
 470              	.LVL18:
 101:Src/main.c    **** 
 471              		.loc 1 101 0
 472 0006 FFF7FEFF 		bl	SystemClock_Config
 473              	.LVL19:
 108:Src/main.c    ****   MX_DAC1_Init();
 474              		.loc 1 108 0
 475 000a FFF7FEFF 		bl	MX_GPIO_Init
 476              	.LVL20:
 109:Src/main.c    ****   MX_TIM3_Init();
 477              		.loc 1 109 0
 478 000e FFF7FEFF 		bl	MX_DAC1_Init
 479              	.LVL21:
 110:Src/main.c    ****   MX_USART1_UART_Init();
 480              		.loc 1 110 0
 481 0012 FFF7FEFF 		bl	MX_TIM3_Init
 482              	.LVL22:
 111:Src/main.c    ****   /* USER CODE BEGIN 2 */
 483              		.loc 1 111 0
 484 0016 FFF7FEFF 		bl	MX_USART1_UART_Init
 485              	.LVL23:
 486              	.L25:
 121:Src/main.c    ****     /* USER CODE BEGIN 3 */
 487              		.loc 1 121 0 discriminator 1
 488 001a 0248     		ldr	r0, .L27
 489 001c FFF7FEFF 		bl	puts
 490              	.LVL24:
 491 0020 FBE7     		b	.L25
 492              	.L28:
ARM GAS  /tmp/ccqr6NDX.s 			page 17


 493 0022 00BF     		.align	2
 494              	.L27:
 495 0024 00000000 		.word	.LC0
 496              		.cfi_endproc
 497              	.LFE132:
 499              		.section	.text.Error_Handler,"ax",%progbits
 500              		.align	1
 501              		.global	Error_Handler
 502              		.syntax unified
 503              		.thumb
 504              		.thumb_func
 505              		.fpu fpv4-sp-d16
 507              	Error_Handler:
 508              	.LFB139:
 356:Src/main.c    **** 
 357:Src/main.c    **** /* USER CODE BEGIN 4 */
 358:Src/main.c    **** 
 359:Src/main.c    **** /* USER CODE END 4 */
 360:Src/main.c    **** 
 361:Src/main.c    **** /**
 362:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 363:Src/main.c    ****   * @retval None
 364:Src/main.c    ****   */
 365:Src/main.c    **** void Error_Handler(void)
 366:Src/main.c    **** {
 509              		.loc 1 366 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513              		@ link register save eliminated.
 514 0000 7047     		bx	lr
 515              		.cfi_endproc
 516              	.LFE139:
 518              		.comm	huart1,128,4
 519              		.comm	htim3,64,4
 520              		.comm	hqspi,68,4
 521              		.comm	hdac1,20,4
 522              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 523              		.align	2
 524              	.LC0:
 525 0000 48656C6C 		.ascii	"Hello World\000"
 525      6F20576F 
 525      726C6400 
 526              		.text
 527              	.Letext0:
 528              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 529              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 530              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 531              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/system_stm32l4xx.h"
 532              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l475xx.h"
 533              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 534              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
 535              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc_ex.h"
 536              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 537              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dac.h"
 538              		.file 12 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash.h"
 539              		.file 13 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_qspi.h"
ARM GAS  /tmp/ccqr6NDX.s 			page 18


 540              		.file 14 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
 541              		.file 15 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 542              		.file 16 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
 543              		.file 17 "/usr/include/newlib/sys/lock.h"
 544              		.file 18 "/usr/include/newlib/sys/_types.h"
 545              		.file 19 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 546              		.file 20 "/usr/include/newlib/sys/reent.h"
 547              		.file 21 "/usr/include/newlib/sys/errno.h"
 548              		.file 22 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim_ex.h"
 549              		.file 23 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_pwr_ex.h"
 550              		.file 24 "<built-in>"
ARM GAS  /tmp/ccqr6NDX.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccqr6NDX.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccqr6NDX.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccqr6NDX.s:75     .text.MX_GPIO_Init:0000000000000040 $d
     /tmp/ccqr6NDX.s:80     .text.MX_DAC1_Init:0000000000000000 $t
     /tmp/ccqr6NDX.s:86     .text.MX_DAC1_Init:0000000000000000 MX_DAC1_Init
     /tmp/ccqr6NDX.s:149    .text.MX_DAC1_Init:0000000000000040 $d
                            *COM*:0000000000000014 hdac1
     /tmp/ccqr6NDX.s:155    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccqr6NDX.s:161    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccqr6NDX.s:232    .text.MX_TIM3_Init:0000000000000050 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccqr6NDX.s:238    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccqr6NDX.s:244    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccqr6NDX.s:287    .text.MX_USART1_UART_Init:0000000000000028 $d
                            *COM*:0000000000000080 huart1
     /tmp/ccqr6NDX.s:293    .text._write:0000000000000000 $t
     /tmp/ccqr6NDX.s:300    .text._write:0000000000000000 _write
     /tmp/ccqr6NDX.s:334    .text._write:000000000000001c $d
     /tmp/ccqr6NDX.s:339    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccqr6NDX.s:346    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccqr6NDX.s:449    .text.main:0000000000000000 $t
     /tmp/ccqr6NDX.s:456    .text.main:0000000000000000 main
     /tmp/ccqr6NDX.s:495    .text.main:0000000000000024 $d
     /tmp/ccqr6NDX.s:500    .text.Error_Handler:0000000000000000 $t
     /tmp/ccqr6NDX.s:507    .text.Error_Handler:0000000000000000 Error_Handler
                            *COM*:0000000000000044 hqspi
     /tmp/ccqr6NDX.s:523    .rodata.main.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memset
HAL_DAC_Init
HAL_DAC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
HAL_UART_Transmit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_PWREx_ControlVoltageScaling
HAL_Init
puts
